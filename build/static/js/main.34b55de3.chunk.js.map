{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","Date","getFullYear","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"gNAiBeA,EAfF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BACED,UAAWJ,EAAKG,UAAY,kBAAoB,YAChDG,QAASL,GAERC,K,gBCeM,EAvBA,WACb,IAAMK,EAAUC,IAAMC,IAHR,cAMRC,EAAc,CAClBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNT,WAAW,GAEb,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAhBR,aAgBsBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UArBF,aAqBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCrB9BK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OAAgB,OAAZA,EACK,KAEF,yBAAKjB,UAAU,SAASiB,ICA3BC,EAAS,kBACb,yBAAKlB,UAAU,UACb,6BACA,+FACmE,KAChE,IAAImB,MAAOC,iBAwFHC,EAnFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAAqBvB,MAAK,SAAAwB,GACxBT,EAASS,QAEV,IAEH,IAAMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAvC,GAAI,OAAIA,EAAKG,aA0C9B,OACE,oCACE,yBAAKC,UAAU,WACb,qCACA,kBAAC,EAAD,CAAciB,QAASY,IACvB,4BAAQ7B,UAAU,SAASE,QAAS,kBAAM0B,GAAYD,KAAtD,QACQA,EAAU,YAAc,OAEhC,4BACGO,EAAYE,KAAI,SAAAxC,GAAI,OACnB,kBAAC,EAAD,CACEyC,IAAKzC,EAAKW,GACVX,KAAMA,EACNC,iBAAkB,kBApCH,SAAAU,GACzB,IAAMX,EAAO2B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEhC,KAAOA,KAChCiC,EAAW,2BACZ5C,GADY,IAEfG,WAAYH,EAAKG,YAGnBiC,EACUzB,EAAIiC,GACX/B,MAAK,SAAAgC,GACJjB,EAASD,EAAMa,KAAI,SAAAxC,GAAI,OAAKA,EAAKW,KAAOA,EAAKX,EAAO6C,SAErDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJlC,EAAKK,QADD,uCAGf2C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAEhC,KAAOA,SAiBNsC,CAAmBjD,EAAKW,WAItD,0BAAMuC,SAzDI,SAAAC,GACdA,EAAMC,iBACN,IAAMC,EAAa,CACjBhD,QAASwB,EACTjB,MAAM,IAAIW,MAAO+B,cACjBnD,UAAWoD,KAAKC,SAAW,IAE7BpB,EAAmBiB,GAAYxC,MAAK,SAAAgC,GAClCjB,EAASD,EAAMX,OAAO6B,IACtBf,EAAW,SAiDP,2BAAO2B,MAAO5B,EAAS6B,SA7CN,SAAAP,GACvBrB,EAAWqB,EAAMQ,OAAOF,UA6ClB,4BAAQG,KAAK,UAAb,UAGJ,kBAAC,EAAD,QCzFNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.34b55de3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button\r\n        className={note.important ? 'button-sm--grey' : 'button-sm'}\r\n        onClick={toggleImportance}\r\n      >\r\n        {label}\r\n      </button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  // return request.then((response) => response.data)\r\n  // remove below - used for testing purposes\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }\r\n","import React from 'react'\r\n\r\nexport const Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  return <div className=\"error\">{message}</div>\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport { Notification } from './components/Notification'\nimport './index.css'\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <br />\n    <em>\n      Note app, Department of Computer Science, University of Helsinki{' '}\n      {new Date().getFullYear()}\n    </em>\n  </div>\n)\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const addNote = event => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n  }\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {\n      ...note,\n      important: !note.important,\n    }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}'  was already removed from server`,\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  return (\n    <>\n      <div className=\"wrapper\">\n        <h1>Notes</h1>\n        <Notification message={errorMessage} />\n        <button className=\"toggle\" onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n        <ul>\n          {notesToShow.map(note => (\n            <Note\n              key={note.id}\n              note={note}\n              toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n          ))}\n        </ul>\n        <form onSubmit={addNote}>\n          <input value={newNote} onChange={handleNoteChange} />\n          <button type=\"submit\">save</button>\n        </form>\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}